swagger: "2.0"
info:
  title: Web Dev Tools API
  version: 1.0.0
paths:
  /v1/auth/magic-link:
    post:
      tags:
        - auth
      summary: Register User with Magic Link
      description: Registers a new user and sends a magic link for authentication.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
      responses:
        '201':
          description: Magic link sent to user's email.
        '400':
          description: Bad request.

  /v1/auth/magic-link/{token}:
    get:
      tags:
        - auth
      summary: Authenticate User with Magic Link
      description: Authenticates a user by validating the magic link token.
      parameters:
        - in: path
          name: token
          required: true
          type: string
      responses:
        '302':
          description: User authenticated and redirected.
        '400':
          description: Bad request.

  /v1/auth/logout:
    delete:
      tags:
        - auth
      summary: Logout User
      description: Logs out the current user and invalidates the session token.
      responses:
        '200':
          description: User successfully logged out.
        '400':
          description: Bad request.

  /v1/auth/github/login:
    get:
      tags:
        - auth
      summary: GitHub Login
      description: Initiates GitHub OAuth login process.
      responses:
        '307':
          description: Redirect to GitHub OAuth.

  /v1/auth/github/callback:
    get:
      tags:
        - auth
      summary: GitHub Callback
      description: Handles the callback from GitHub OAuth.
      responses:
        '302':
          description: User authenticated with GitHub and redirected.
        '400':
          description: Bad request.

  /v1/categories:
    post:
      tags:
        - categories
      summary: Create a new category
      description: Creates a new category with the provided name.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
      responses:
        '201':
          description: Category successfully created.
        '400':
          description: Bad request.

    get:
      tags:
        - categories
      summary: Get all published categories
      description: Retrieves a list of all published categories.
      responses:
        '200':
          description: A list of published categories.
        '500':
          description: Server error.

  /v1/categories/admin:
    get:
      tags:
        - categories
      summary: Get all categories for admin
      description: Retrieves a list of all categories with admin-specific information.
      responses:
        '200':
          description: A list of categories with metadata.
        '500':
          description: Server error.

  /v1/categories/{id}:
    delete:
      tags:
        - categories
      summary: Delete a category
      description: Deletes a category with the specified ID.
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Category successfully deleted.
        '404':
          description: Category not found.
        '500':
          description: Server error.

  /v1/categories/toggle-published/{id}:
    get:
      tags:
        - categories
      summary: Toggle category published status
      description: Toggles the published status of a category with the specified ID.
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Category published status toggled.
        '404':
          description: Category not found.
        '500':
          description: Server error.

  /v1/favorites:
    get:
      tags:
        - favorites
      summary: Get all favorites
      description: Retrieves all favorite tools for the authenticated user.
      responses:
        '200':
          description: A list of favorite tools.
        '500':
          description: Server error.

  /v1/favorites/{id}:
    get:
      tags:
        - favorites
      summary: Add a favorite
      description: Adds a tool to the user's favorites.
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          format: int64
      responses:
        '201':
          description: Tool added to favorites.
        '400':
          description: Invalid request.
        '500':
          description: Server error.

    delete:
      tags:
        - favorites
      summary: Remove a favorite
      description: Removes a tool from the user's favorites.
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Tool removed from favorites.
        '400':
          description: Invalid request.
        '500':
          description: Server error.

  /v1/tools:
    post:
      tags:
        - tools
      summary: Create a new tool
      description: Creates a new tool with the provided details.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
              - category
              - description
              - imageUrl
              - website
            properties:
              name:
                type: string
              category:
                type: string
              description:
                type: string
              imageUrl:
                type: string
              website:
                type: string
      responses:
        '201':
          description: Tool successfully created.
        '400':
          description: Bad request.

    get:
      tags:
        - tools
      summary: Get all published tools
      description: Retrieves a list of all published tools.
      responses:
        '200':
          description: A list of published tools.
        '500':
          description: Server error.

  /v1/tools/{id}:
    get:
      tags:
        - tools
      summary: Get a specific tool
      description: Retrieves details of a specific tool by ID.
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Details of a tool.
        '404':
          description: Tool not found.

    patch:
      tags:
        - tools
      summary: Update a specific tool
      description: Updates the details of a specific tool by ID.
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              category:
                type: string
              description:
                type: string
              imageUrl:
                type: string
              published:
                type: boolean
      responses:
        '200':
          description: Tool successfully updated.
        '400':
          description: Bad request.

    delete:
      tags:
        - tools
      summary: Delete a specific tool
      description: Deletes a specific tool by ID.
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Tool successfully deleted.
        '404':
          description: Tool not found.

  /v1/tools/toggle-published/{id}:
    get:
      tags:
        - tools
      summary: Toggle tool published status
      description: Toggles the published status of a specific tool by ID.
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Tool published status toggled.
        '404':
          description: Tool not found.

  /v1/upload/image:
    post:
      tags:
        - upload
      summary: Upload an image
      description: Uploads an image to the server and returns the URL of the uploaded image.
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file
          type: file
          required: true
          description: The image file to upload.
      responses:
        '201':
          description: Image successfully uploaded.
          schema:
            type: object
            properties:
              url:
                type: string
                description: The URL of the uploaded image.
        '400':
          description: Invalid request or file not provided.
        '500':
          description: Server error.

  /v1/users:
    get:
      tags:
        - users
      summary: Get current user information
      description: Retrieves information about the currently authenticated user.
      responses:
        '200':
          description: Information about the current user.
          schema:
            type: object
            properties:
              user:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                  email:
                    type: string
        '400':
          description: Bad request.
        '401':
          description: Unauthorized. User is not authenticated.

  /v1/healthcheck:
    get:
      tags:
        - health
      summary: API Health Check
      description: Checks if the API is up and running.
      responses:
        '200':
          description: API is operational.
          schema:
            type: object
            properties:
              status:
                type: string
                example: ok
